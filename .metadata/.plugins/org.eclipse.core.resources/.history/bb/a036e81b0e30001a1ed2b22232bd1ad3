package com.carloseduardo.cursopv.services;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.carloseduardo.cursopv.domain.Aluno;
import com.carloseduardo.cursopv.domain.Desempenho;
import com.carloseduardo.cursopv.dto.DesempenhoDTO;
import com.carloseduardo.cursopv.dto.DesempenhoNewDTO;
import com.carloseduardo.cursopv.repositories.DesempenhoRepository;
import com.carloseduardo.cursopv.services.exception.ObjectNotFoundException;

@Service
public class DesempenhoService {

	@Autowired
	DesempenhoRepository desempenhoRepository;
	
	@Autowired
	private AlunoService alunoService;
	
	public Desempenho find(Integer id) {
		Optional<Desempenho> obj = desempenhoRepository.findById(id);
		return obj.orElseThrow(() -> new ObjectNotFoundException(
				"Objeto n√£o encontrado! Id: " + id + ", Tipo: " + Desempenho.class.getName()));
	}

	@Transactional
	public Desempenho insert(Desempenho obj, Integer idAluno) {
		obj.setId(null);
		Aluno aluno = alunoService.find(idAluno);
		aluno.setDesempenho(obj);
		obj = desempenhoRepository.save(obj);
		return obj;
	}
	
	public Desempenho update(Desempenho obj) {
		Desempenho newObj = find(obj.getId());
		updateDate(newObj, obj);
		return desempenhoRepository.save(newObj);
	}
	
	public void delete(Integer id) {
		find(id);
		desempenhoRepository.deleteById(id);
	}
	
	private void updateDate(Desempenho newObj, Desempenho obj) {
		newObj.setLinguaPortuguesa(obj.getLinguaPortuguesa());
		newObj.setMatematica(obj.getMatematica());
		newObj.setHistoria(obj.getHistoria());
		newObj.setGeografia(obj.getGeografia());
		newObj.setFisica(obj.getFisica());
		newObj.setQuimica(obj.getQuimica());
		newObj.setBiologia(obj.getBiologia());
		newObj.setSociologia(obj.getSociologia()); 
		newObj.setFilosofia(obj.getFilosofia());
		newObj.setLinguaEspanhola(obj.getLinguaEspanhola());
		newObj.setMediaGeral(obj.getMediaGeral());
	}
	
	public List<Desempenho> findAll(){
		return desempenhoRepository.findAll();
	}
	
	public Desempenho fromDTO(DesempenhoDTO objDto) {
		return new Desempenho(objDto.getId(), objDto.getLinguaPortuguesa(), objDto.getMatematica(), objDto.getHistoria(), objDto.getGeografia(),
				objDto.getFisica(), objDto.getQuimica(), objDto.getBiologia(), objDto.getSociologia(), objDto.getFilosofia(), objDto.getLinguaEspanhola(),
				objDto.getMediaGeral(), null);
	}
	
	public Desempenho fromDTO(DesempenhoNewDTO objDto) {
		Aluno aluno = new Aluno(objDto.getAluno().getId(), objDto.getAluno().getNome(), objDto.getAluno().getMatricula(), objDto.getAluno().getEmail(),
				objDto.getAluno().getCpf());
		Desempenho desempenho = new Desempenho(null, objDto.getLinguaPortuguesa(), objDto.getMatematica(), objDto.getHistoria(), objDto.getGeografia(),
				objDto.getFisica(), objDto.getQuimica(), objDto.getBiologia(), objDto.getSociologia(), objDto.getFilosofia(), objDto.getLinguaEspanhola(),
				objDto.getMediaGeral(), null);
		aluno.setDesempenho(desempenho);
		return desempenho;
	}
	
	public Page<Desempenho> findPage(Integer page, Integer linesPerPage, String orderBy, String direction){
		PageRequest pageRequest = PageRequest.of(page, linesPerPage, Direction.valueOf(direction), orderBy);
		return desempenhoRepository.findAll(pageRequest);
	}
}
