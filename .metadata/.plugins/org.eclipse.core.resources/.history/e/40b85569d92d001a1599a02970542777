package com.carloseduardo.cursopv.resources;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.carloseduardo.cursopv.domain.Aluno;
import com.carloseduardo.cursopv.domain.Desempenho;
import com.carloseduardo.cursopv.dto.AlunoDTO;
import com.carloseduardo.cursopv.dto.DesempenhoDTO;
import com.carloseduardo.cursopv.dto.DesempenhoNewDTO;
import com.carloseduardo.cursopv.services.DesempenhoService;

public class DesempenhoResource {

	@Autowired
	private DesempenhoService service;
	
	@RequestMapping(value="/{id}", method=RequestMethod.GET)
	public ResponseEntity<?> find(@PathVariable Integer id) {
		Desempenho obj = service.find(id);
		return ResponseEntity.ok().body(obj);	
	}
	
	@RequestMapping(method=RequestMethod.POST)
	public ResponseEntity<Void> insert(@Valid @RequestBody DesempenhoNewDTO objDto, Aluno aluno){
		Desempenho obj = service.fromDTO(objDto);
		obj = service.insert(obj, aluno.getId());
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
				.path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).build();
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.PUT)
	public ResponseEntity<Void> update(@Valid @RequestBody DesempenhoDTO objDto, @PathVariable Integer id){
		Desempenho obj = service.fromDTO(objDto);	
		obj.setId(id);
		obj = service.update(obj);
		return ResponseEntity.noContent().build();
	}
	
	@RequestMapping(value="/{id}", method=RequestMethod.DELETE)
		public ResponseEntity<Void> delete(@PathVariable Integer id){
		service.delete(id);
		return ResponseEntity.noContent().build();
	}
	
	@RequestMapping(method=RequestMethod.GET)
	public ResponseEntity<List<DesempenhoDTO>> findAll() {
		List<Desempenho> list = service.findAll();
		List<DesempenhoDTO> listDto = list.stream().map(obj -> new DesempenhoDTO(obj)).collect(Collectors.toList());
		return ResponseEntity.ok().body(listDto);
		
	}

	@RequestMapping(value="/page", method=RequestMethod.GET)
	public ResponseEntity<Page<DesempenhoDTO>> findPage(
			@RequestParam(value="page", defaultValue="0") Integer page, 
			@RequestParam(value="linesPerPage", defaultValue="24") Integer linesPerPage, 
			@RequestParam(value="orderBy", defaultValue="nome") String orderBy, 
			@RequestParam(value="direction", defaultValue="ASC") String direction) {
		Page<Desempenho> list = service.findPage(page, linesPerPage, orderBy, direction);
		Page<DesempenhoDTO> listDto = list.map(obj -> new DesempenhoDTO(obj));
		return ResponseEntity.ok().body(listDto);	
	}
}
